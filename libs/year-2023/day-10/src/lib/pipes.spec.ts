import { createMatrix, Matrix } from '@advent-of-code/util-arrays';
import { findEnclosedTiles, findFarthestPointInLoop } from './pipes';

describe('pipes', () => {
  it('should find farthest point', () => {
    const pipes1 = createMatrix<string>([
      ['.', '.', '.', '.', '.'],
      ['.', 'S', '-', '7', '.'],
      ['.', '|', '.', '|', '.'],
      ['.', 'L', '-', 'J', '.'],
      ['.', '.', '.', '.', '.'],
    ]);

    const pipes2 = createMatrix<string>([
      ['.', '.', 'F', '7', '.'],
      ['.', 'F', 'J', '|', '.'],
      ['S', 'J', '.', 'L', '7'],
      ['|', 'F', '-', '-', 'J'],
      ['L', 'J', '.', '.', '.'],
    ]);

    const pipes3 = createMatrix<string>([
      ['.', '.', '.', 'F', '7', '.'],
      ['.', '.', 'F', 'J', '|', '.'],
      ['F', 'S', 'J', '.', 'L', '7'],
      ['L', '7', 'F', '-', '-', 'J'],
      ['.', 'L', 'J', '.', '.', '.'],
    ]);

    expect(findFarthestPointInLoop(pipes1)).toEqual(4);
    expect(findFarthestPointInLoop(pipes2)).toEqual(8);
    expect(findFarthestPointInLoop(pipes3)).toEqual(9);
  });

  xit('should find the number of inner tiles', () => {
    const pipes1 = createMatrix<string>([
      ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
      ['.', 'S', '-', '-', '-', '-', '-', '-', '7', '.'],
      ['.', '|', 'F', '-', '-', '-', '-', '7', '|', '.'],
      ['.', '|', '|', 'O', 'O', 'O', 'O', '|', '|', '.'],
      ['.', '|', '|', 'O', 'O', 'O', 'O', '|', '|', '.'],
      ['.', '|', 'L', '-', '7', 'F', '-', 'J', '|', '.'],
      ['.', '|', 'I', 'I', '|', '|', 'I', 'I', '|', '.'],
      ['.', 'L', '-', '-', 'J', 'L', '-', '-', 'J', '.'],
      ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],
    ]);

    const pipes2 = createMatrix<string>([
      [
        '.',
        'F',
        '-',
        '-',
        '-',
        '-',
        '7',
        'F',
        '7',
        'F',
        '7',
        'F',
        '7',
        'F',
        '-',
        '7',
        '.',
        '.',
        '.',
        '.',
      ],
      [
        '.',
        '|',
        'F',
        '-',
        '-',
        '7',
        '|',
        '|',
        '|',
        '|',
        '|',
        '|',
        '|',
        '|',
        'F',
        'J',
        '.',
        '.',
        '.',
        '.',
      ],
      [
        '.',
        '|',
        '|',
        '.',
        'F',
        'J',
        '|',
        '|',
        '|',
        '|',
        '|',
        '|',
        '|',
        '|',
        'L',
        '7',
        '.',
        '.',
        '.',
        '.',
      ],
      [
        'F',
        'J',
        'L',
        '7',
        'L',
        '7',
        'L',
        'J',
        'L',
        'J',
        '|',
        '|',
        'L',
        'J',
        '.',
        'L',
        '-',
        '7',
        '.',
        '.',
      ],
      [
        'L',
        '-',
        '-',
        'J',
        '.',
        'L',
        '7',
        '.',
        '.',
        '.',
        'L',
        'J',
        'S',
        '7',
        'F',
        '-',
        '7',
        'L',
        '7',
        '.',
      ],
      [
        '.',
        '.',
        '.',
        '.',
        'F',
        '-',
        'J',
        '.',
        '.',
        'F',
        '7',
        'F',
        'J',
        '|',
        'L',
        '7',
        'L',
        '7',
        'L',
        '7',
      ],
      [
        '.',
        '.',
        '.',
        '.',
        'L',
        '7',
        '.',
        'F',
        '7',
        '|',
        '|',
        'L',
        '7',
        '|',
        '.',
        'L',
        '7',
        'L',
        '7',
        '|',
      ],
      [
        '.',
        '.',
        '.',
        '.',
        '.',
        '|',
        'F',
        'J',
        'L',
        'J',
        '|',
        'F',
        'J',
        '|',
        'F',
        '7',
        '|',
        '.',
        'L',
        'J',
      ],
      [
        '.',
        '.',
        '.',
        '.',
        'F',
        'J',
        'L',
        '-',
        '7',
        '.',
        '|',
        '|',
        '.',
        '|',
        '|',
        '|',
        '|',
        '.',
        '.',
        '.',
      ],
      [
        '.',
        '.',
        '.',
        '.',
        'L',
        '-',
        '-',
        '-',
        'J',
        '.',
        'L',
        'J',
        '.',
        'L',
        'J',
        'L',
        'J',
        '.',
        '.',
        '.',
      ],
    ]);

    expect(findEnclosedTiles(pipes1)).toEqual(4);
    expect(findEnclosedTiles(pipes2)).toEqual(8);
  });
});
